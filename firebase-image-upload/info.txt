Firebase Account Setup and Image Upload Guide

1. Create a Firebase Project
  - Go to https://console.firebase.google.com/
  - Sign in with your Google account.
  - Click "Add project".
  - Enter your project name and click "Continue".
  - (Optional) Enable Google Analytics for your project, then click "Continue" and "Create project".
  - Wait for the project to be created, then click "Continue".

2. Register Your Web Application
  - In the Firebase console, select your project.
  - Click the web icon ("</>") to add a web app.
  - Enter an app nickname (e.g., EasyForAll) and click "Register app".
  - Copy the Firebase SDK config (the code snippet with apiKey, authDomain, etc.).
  - Paste these credentials into your `.env` file or a config file in your project.
  - Click "Continue to console".

3. Enable Firebase Storage
  - In the Firebase console, go to "Build" > "Storage".
  - Click "Get started" and follow the prompts to set up storage.
  - After setup, click on the "Rules" tab.
  - For development, you can set rules to allow read and write access to everyone (not recommended for production):

    ```
    service firebase.storage {
     match /b/{bucket}/o {
      match /{allPaths=**} {
        allow read, write: if true;
      }
     }
    }
    ```

  - Click "Publish" to save the rules.

4. Upload Images from Node.js Using Multer and Firebase Admin SDK

  - Install dependencies:
    ```
    npm install multer firebase-admin
    ```

  - Configure Multer for file uploads in your Express app.
  - Convert the uploaded file to a buffer.
  - Initialize Firebase Admin SDK in your Node.js backend using your service account key.
  - Upload the buffer to Firebase Storage:

    ```js
    const admin = require('firebase-admin');
    const multer = require('multer');
    const upload = multer({ storage: multer.memoryStorage() });

    // Initialize Firebase Admin
    admin.initializeApp({
     credential: admin.credential.cert(require('./serviceAccountKey.json')),
     storageBucket: 'your-project-id.appspot.com'
    });

    const bucket = admin.storage().bucket();

    // Express route example
    app.post('/upload', upload.single('image'), async (req, res) => {
     const blob = bucket.file(Date.now() + '-' + req.file.originalname);
     const blobStream = blob.createWriteStream({
      metadata: {
        contentType: req.file.mimetype
      }
     });

     blobStream.on('error', err => res.status(500).send(err));
     blobStream.on('finish', () => {
      const publicUrl = `https://storage.googleapis.com/${bucket.name}/${blob.name}`;
      res.status(200).send({ imageUrl: publicUrl });
     });

     blobStream.end(req.file.buffer);
    });
    ```

  - The response will include the public URL of the uploaded image, which you can use in your application.

**References:**
- Firebase Console: https://console.firebase.google.com/
- Firebase Admin SDK: https://firebase.google.com/docs/admin/setup
- Firebase Storage Rules: https://firebase.google.com/docs/storage/security
- Multer Docs: https://github.com/expressjs/multer